name: timeseries-local
networks: { devnet: { driver: bridge } }
volumes:
  dbdata: {}
  opensearch-data: {}

services:
  db:
    image: timescale/timescaledb:2.15.2-pg16
    container_name: ts-db
    env_file: ../../.env
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-timeseries}
    ports: [ "${POSTGRES_HOST_PORT:-5432}:${POSTGRES_PORT:-5432}" ]
    volumes:
      - dbdata:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    command: [ "-c", "listen_addresses=*", "-c", "hba_file=/etc/postgresql/pg_hba.conf" ]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 30
    restart: unless-stopped
    networks: [ devnet ]

  search:
    image: opensearchproject/opensearch:2.14.0
    container_name: ts-search
    env_file: ../../.env
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=true
      - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock: { soft: -1, hard: -1 }
      nofile: { soft: 65536, hard: 65536 }
    ports: [ "9200:9200" ]
    volumes:
      - opensearch-data:/usr/share/opensearch/data
    healthcheck:
      test: ["CMD", "bash", "-c", "wget -qO- http://127.0.0.1:9200 >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 30
    restart: unless-stopped
    networks: [ devnet ]

  # Optional Redis (enable with --profile redis)
  redis:
    image: redis:7.2
    container_name: ts-redis
    env_file: ../../.env
    ports: [ "6379:6379" ]
    profiles: [ "redis" ]
    restart: unless-stopped
    networks: [ devnet ]

  # Optional Jaeger UI (enable with --profile jaeger)
  jaeger:
    image: jaegertracing/all-in-one:1.57
    container_name: ts-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "4320:4317"
      - "4321:4318"
    profiles: [ "jaeger" ]
    restart: unless-stopped
    networks: [ devnet ]

  service:
    build:
      context: ../../service
    container_name: ts-service
    env_file: ../../.env
    environment:
      - DB_URL=jdbc:postgresql://ts-db:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-timeseries}
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://ts-db:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-timeseries}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER:-postgres}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    depends_on:
      db:       { condition: service_healthy }
      search:   { condition: service_started }
    healthcheck:
      test: ["CMD", "bash", "-c", "wget -qO- http://127.0.0.1:8080/actuator/health | grep '\"status\":\"UP\"' >/dev/null"]
      interval: 10s
      timeout: 5s
      retries: 30
    restart: unless-stopped
    networks: [ devnet ]

  gateway:
    build:
      context: ../../gateway
    container_name: ts-gateway
    env_file: ../../.env
    depends_on:
      service: { condition: service_healthy }
    environment:
      - HTTP_PORT=8080
      - HTTPS_PORT=8443
      - PUBLIC_HTTPS_PORT=443
      - REDIRECT_HTTP=true
      - SSL_KEY_PATH=/certs/server.key
      - SSL_CERT_PATH=/certs/server.crt
    ports:
      - "80:8080"
      - "443:8443"
    volumes:
      - ../../certs:/certs:ro
    healthcheck:
      test: ["CMD", "bash", "-c", "wget -qO- --no-check-certificate https://127.0.0.1:8443/health >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 30
    restart: unless-stopped
    networks: [ devnet ]
